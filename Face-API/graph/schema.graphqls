# GraphQL schema example
#
# https://gqlgen.com/getting-started/

"""
A face detected in an image with details about the face features/attributes and 2-dimensional position.
"""
type DetectedFace {
  """
  DetectedFace in the provided image has a unique FaceID uuid
  """
  FaceID: String!
  """
  A rectangle can be drawn around the detected face using FaceRectangle information.
  """
  FaceRectangle: Rectangle!
  """
  Face features like eyes, nose, and mouth, can be pinpointed using FaceLandmarks.
  """
  FaceLandmarks: Landmarks!
  """
  Attributes of the face like hair, emotion, gender, etc. can be found in FaceAttributes.
  """
  FaceAttributes: Attributes!
}

"""
Rectangle gives the top left corner of a detected face and how long (height) and wide (length) the detected face is.

To draw a rectangle around the detected face:

  Top-left corner: (Top, Left)

  Top-right corner: (Top, Left+Width)

  Bottom-left corner: (Top+Height, Left)

  Bottom-right corner: (Top+Height, Left+Width)
"""
type Rectangle {
  """
  Width along X-axis of the detected face
  """
  Width: Int!
  """
  Height along Y-axis of the detected face
  """
  Height: Int!
  """
  Y-intercept of the top of the detected face
  """
  Top: Int!
  """
  X-intercept of the left side of the detected face
  """
  Left: Int!
}

"""
Detected Faces have explicit features related to the positioning of a person's eyes, mouth, and nose that can be plotted on a 2-dimensional plane.
"""
type Landmarks {
  PupilLeft: Coordinate
  PupilRight: Coordinate
  NoseTip: Coordinate
  MouthLeft: Coordinate
  MouthRight: Coordinate
  EyebrowLeftOuter: Coordinate
  EyebrowLeftInner: Coordinate
  EyeLeftOuter: Coordinate
  EyeLeftTop: Coordinate
  EyeLeftBottom: Coordinate
  EyeLeftInner: Coordinate
  EyebrowRightInner: Coordinate
  EyebrowRightOuter: Coordinate
  EyeRightInner: Coordinate
  EyeRightTop: Coordinate
  EyeRightBottom: Coordinate
  EyeRightOuter: Coordinate
  NoseRootLeft: Coordinate
  NoseRootRight: Coordinate
  NoseLeftAlarTop: Coordinate
  NoseRightAlarTop: Coordinate
  NoseLeftAlarOutTip: Coordinate
  NoseRightAlarOutTip: Coordinate
  UpperLipTop: Coordinate
  UpperLipBottom: Coordinate
  UnderLipTop: Coordinate
  UnderLipBottom: Coordinate
}

"""
Attributes of the detected face
"""
type Attributes {
  """
  Estimated age of the detected face in years.
  """
  Age: Float
  """
  Predicted gender of the detected face is "female" or "male".
  """
  Gender: String
  """
  Estimated smile intensity of the detected face where 0 is no smile and 1 is a strong smile.
  """
  Smile: Float
  """
  Estimated length of the moustache on the detected face where 0 is no moustache and 1 is a very long moustache.
  """
  Moustache: Float
  """
  Estimated length of the beard on the detected face where 0 is no beard and 1 is a very long beard.
  """
  Beard: Float
  """
  Estimated length of the sideburns on the detected face where 0 is no sideburns and 1 is very long sideburns.
  """
  Sideburns: Float
  """
  Predicted type of glasses on the detected face. Values could be "NoGlasses", "ReadingGlasses", "Sunglasses", or "SwimmingGoggles".
  """
  Glasses: String
  """
  The intensity of each type of emotion that can be detected on the face. Values range between [0,1] where 0 is no emotion and 1 is an intense emotion.
  """
  Emotion: Emotion
  """
  Highest confidence hair color of the detected face. If the color cannot be detected, the hair is "invisible", or the individual is likely "bald" then the returned color is "Unknown".

  A detected hair color could be "black", "blond", "brown", "gray", "red", "white", or "other".
  """
  HairColor: String
  """
  EyeMakeup predicts if the detected face is wearing eye makeup (true) or not (false).
  """
  EyeMakeup: Boolean
  """
  LipMakeup predicts if the detected face is wearing lipstick (true) or not (false).
  """
  LipMakeup: Boolean
  """
  Accessories around the detected face, including 'headwear', 'glasses' and 'mask'. Empty array means no accessories detected. Note this is after a face is detected. Large mask could result in no face to be detected.
  """
  Accessories: [String]
  """
  Blur is a value between [0,1] that indicates the blurriness of a detected face where 0 is not blurry and 1 is very blurry.
  """
  Blur: Float
  """
  Exposure is a value between [0,1] that indicates the exposure of a detected face where values close to 0 indicate underexposure and values closer to 1 indicate overexposure. Values close to .5 indicate good exposure.
  """
  Exposure: Float
  """
  Noise indicates how noisy the detected face image is where 0 is no noise and 1 is very noisy.
  """
  Noise: Float
}

"""
Each Emotion is a value between 0  and 1 that indicates the confidence that the detected Face is showing the specified Emotion.

0 indicates the Emotion is absent and 1 indicates the Emotion is intense.
"""
type Emotion {
  Anger: Float!
  Contempt: Float!
  Disgust: Float!
  Fear: Float!
  Happiness: Float!
  Neutral: Float!
  Sadness: Float!
  Surprise: Float!
}

"""
Coordinates (X,Y) of the specified Landmark
"""
type Coordinate {
  "x-coordinate"
  X: Float!
  "y-coordinate"
  Y: Float!
}

"""
FaceList holds an array of FaceID objects that are generated when a face is detected from a requested image url. FaceListID and Name are user-specified.
"""
type FaceList {
  """
  Provided ID of the FaceList. The ID must only contain lowercase letters, underscores, and/or numbers. It cannot be equivalent to any other facelist ID.
  """
  FaceListID: String!
  """
  Provided Name of the FaceList
  """
  Name: String!
  """
  Persistent FaceIDs saved to the specified FaceList.
  """
  Faces: [String!]
}

type Query {
  """
  Given the url of an image, return all of the detected faces in the image. These faces and their given faceIDs and attributes are *temporary*. To save a permanent face (no image is saved), create a FaceList and add a face to it.

  Images should be JPEG, PNG, GIF (first frame), or BMP format.

  For most accurate results, images should be oriented so that a face's eyes are at the top and the chin is at the bottom.

  Faces that are between 36x36 pixels and 4096x4096 pixels can be detected, provided that the total image size is proportional. For example, a minimum face size of 36x36 can be detected in a 1920x1080px image, but larger images will have a larger minimum face size.

  Faces are less detectable if:
    * the image has extreme lighting
    * the face (and/or eyes) is obstructed
    * the face has unusual hair type or facial hair
    * the face has extreme expressions
  """
  faces(
    "A URL of an image with 1 or more detectable faces"
    url: String!
  ): [DetectedFace!]!

  """
  Get the FaceList with the specified FaceListID.
  """
  facelist(
    "The user-specified ID that uniquely identifies this FaceList."
    FaceListID: String!
  ): FaceList!

  """
  FindSimilarFace searches the provided FaceList for faces that are similar to the provided ProbeFace.

  The URL should be an image with only one face. The face will be detected and used to find a similar face in the facelist. Attributes of the detected face will be returned.
  """
  findSimilarFace(
    """
    The URL of a face to probe for a similar match.
    """
    ProbeFaceURL: String
    """
    The FaceList gallery of faces to find a similar match to the probe face. The FaceListID should be a user created ID using the createFaceList() mutation.
    """
    FaceListID: String!
  ): SimilarFaceResponse!
}

type Mutation {
  """
  Create a FaceList to save persistent faces. FaceLists are used to analyze saved faces and identify similar faces.
  """
  createFaceList(
    "A user-specified ID that uniquely identifies this FaceList. The ID must only contain lowercase letters, underscores, and/or numbers. It cannot be equivalent to any other facelist ID."
    FaceListID: String!
    "A user-specified Name that does not need to be unique."
    Name: String!
  ): FaceList!
  """
  Delete a FaceList and all of its saved Faces.
  """
  deleteFaceList(
    "The user-specified ID that uniquely identifies this FaceList."
    FaceListID: String!
  ): FaceList!
  """
  Add a face detected from the provided url to the list with the provided FaceListID.

  Returned: FaceID & FaceList
  FaceID is the generated unique identifier of the detected and saved Face. You should likely store this value with a name or other information so that you can refer back to what this face represents or where it is from.

  FaceList is the resulting FaceList the face was saved to.

  There should only be one face detected in the image.
  """
  addFaceToList(
    "URL to an image that contains a single detectable face to be added to the list"
    URL: String!
    "The user-specified ID that uniquely identifies this FaceList."
    FaceListID: String!
  ): FaceResponse!

  """
  Delete a face from a FaceList using the specified FaceID and FaceListID.

  Returned: FaceID & FaceList
  FaceID is the unique identifier of the deleted Face.

  FaceList is the resulting FaceList after the face was deleted.
  """
  deleteFaceFromList(
    "The generated FaceID of the face that"
    FaceID: String!
    "The user-specified ID that uniquely identifies this FaceList."
    FaceListID: String!
  ): FaceResponse!
}

"""
Response data structure for retrieving similar faces from a facelist. Contains information about the new detected face from the requested image url, the facelist that the probe image was compared to, and an array of faceIDs with the 3 most similar faces.
"""
type SimilarFaceResponse {
  """
  Face features of the probe face.
  """
  DetectedFace: DetectedFace!
  """
  The FaceList to match the probe face against.
  """
  FaceList: FaceList!
  """
  List of the 3 most similar faces found in the facelist.
  """
  SimilarFaces: [SimilarFace!]!
}

"""
Response data structure for the resulting FaceList after completing the mutation with the provided FaceID.
"""
type FaceResponse {
  "The FaceList that contains (or contained) this Face"
  FaceList: FaceList!
  "The generated unique ID of the detected Face"
  FaceID: String!
}

"""
SimilarFace stores information about the face that was matched to the probe face.
"""
type SimilarFace {
  """
  FaceID of the face that is similar to the probe face.
  """
  SimilarFaceID: String!
  """
  Similarity between [0,1] of the matched face to the probe face. 0 is not similar and 1 is very similar.
  """
  Similarity: Float!
}
